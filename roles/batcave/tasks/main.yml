#
# This role sets up the various packages and scripts needed for a batcave
#

#
# make directory for nfs mounts to live in
#

- name: create /srv/web/pub for nfs mounts
  file: dest=/srv/web/pub state=directory mode=0755
  tags:
  - batcave
  - config

# https://pagure.io/fedora-infrastructure/issue/6422
- name: put openshift repo on batcave for the oc client tools
  template: src="{{ files }}/openshift/openshift.repo" dest="/etc/yum.repos.d/openshift.repo"
  tags:
  - batcave
  - config
  - packages
  - yumrepos

- name: install packages needed
  package: name={{ item }} state=present
  with_items:
  - srm                       # secure rm to delete sensitive files.
  - ansible                   # This is our ansible master, needs ansible installed.
  - ansible-openstack-modules # Needed to manage cloud with ansible
  - yum-metadata-parser       # Needed for rhn sync
  - yum-rhn-plugin            # Needed for rhn sync
  - createrepo_c              # Needed for rhn sync
  - ostree                    # Needed for rhn sync
  - python-sqlalchemy         # Needed for repo2json
  - pyliblzma                 # Needed for repo2json
  - ansible_utils             # Needed for rbac-playbook
  - python-GeoIP              # Needed for geoip scripts
  - python-fedmsg-fasclient   # fasClient fedmsg job
  - bind                      # named-checkzone for dns repo
  - emacs-nox                 # because smooge is weak
  - rpm-sign                  # for the sign-and-import playbook
  - createrepo                # for the sign-and-import playbook
  - unzip                     # general useful util
  - fpaste                    # general useful util
  - mtr                       # useful for network debugging
  - lftp                      # needed to easily pull in builds from koji for internal repos
  - git-email                 # needed to send patches for review to the mailing list
  - python-dns                # needed to have ansible remove ip-based known_host entries
  - libvirt-client            # needed to allow migrations to be run from here.
  - ansible-lint              # needed to check ansible playbooks for issues.
  - atomic-openshift-clients  # For convenient client access to os.fp.o
  - easy-rsa                  # For easy copying into ansible-private for certs.
  - repoSpanner               # To gen repospanner certs for now.
  - dnf                       # To get dnf reposync
  - dnf-plugins-core          # To get dnf reposync
  tags:
  - batcave
  - config

- name: setup ssh_known_hosts file
  copy: src=ssh_known_hosts dest=/etc/ssh/ssh_known_hosts mode=0644
  tags:
  - batcave
  - config
  - fingerprints

- name: Set up RHOS repo for cloud client stuff
  copy: src=rhel7-rhos.repo dest=/etc/yum.repos.d/rhel7-rhos.repo
  tags:
  - cloud
  - batcave
  - config

- name: install cloud client packages
  package: name={{ item }} state=present
  with_items:
  - python-novaclient
  - python-neutronclient
  - python-oslo-config
  - python-six
  - python-keystoneclient
  - python-glanceclient
  tags:
  - cloud
  - batcave
  - config


#
# This is our ansible master, setup ansible
#

- name: setup roots bashrc to note about agents
  copy: src=root_bashrc dest=/root/.bashrc
  tags:
  - batcave
  - config

- name: run daily logview report for ansible actions.
  copy: src=logview.cron dest=/etc/cron.daily/logview.cron mode=0755
  tags:
  - batcave
  - config
  when: inventory_hostname.startswith('batcave01')

- name: Install program for generating ticket key
  copy: src=generate_ticketkey dest=/usr/local/bin/generate_ticketkey mode=0755
  tags:
  - batcave
  - config

- name: setup cron for daily ticketkey reollover
  copy: src=ticketkey.cron dest=/etc/cron.hourly/ticketkey.cron mode=0755
  tags:
  - batcave
  - config
  when: inventory_hostname.startswith('batcave01')

- name: setup cron for removing old pdr requests
  copy: src=pdr.cron dest=/etc/cron.d/pdr.cron mode=0755
  tags:
  - batcave
  - config
  when: inventory_hostname.startswith('batcave01')
#
# Set selinux booleans we need
#

- name: set selinux booleans
  seboolean: name={{ item }} persistent=yes state=yes
  with_items:
  - httpd_can_network_connect
  - httpd_use_nfs
  - httpd_can_network_relay
  - polyinstantiation_enabled
  tags:
  - batcave
  - config

#
# Scripts
#

#
# Hook to notify on git commits used in git repos
#

- name: setup git-notifier script
  copy: src=git-notifier dest=/usr/local/bin/git-notifier mode=0755
  tags:
  - batcave
  - config


# Hook to republish our bare repos for web viewing.
- name: setup syncgittree.sh script
  copy: src=syncgittree.sh dest=/usr/local/bin/syncgittree.sh mode=0755
  tags:
  - batcave
  - config


#
# Script used to gather encrypted security questions from fas
#

- name: setup /usr/local/bin/retrieve-security-question.py
  copy: src=retrieve-security-question.py dest=/usr/local/bin/retrieve-security-question.py mode=0755
  tags:
  - batcave
  - config


# The zodbot server must allow TCP on whatever port zodbot is listening on
# for this to work (currently TCP port 5050).
# Once that is done, you can symlink /usr/local/bin/zodbot-announce-commits.py
# to the 'hooks' directory of the bare repo you're wishing to receive commits
# for, then add a hooks.zodbotchannel to the repo's config file.
# Lastly, add the following lines to your 'update' hook:
# reposource=$(git config hooks.reposource)
# zodbot_channel=$(git config hooks.zodbotchannel)
# python $reposource/hooks/zodbot-announce-commits.py $reposource $zodbot_channel $oldrev $newrev ${1#refs/heads/}

- name: install zodbot-announce-commits script
  copy: src=zodbot-announce-commits.py dest=/usr/local/bin/zodbot-announce-commits.py mode=0755
  tags:
  - batcave
  - config
  - zodbot

#
# This is another script to announce commits, this time to the fedmsg bus
#

- name: install fedmsg-announce-commits script
  copy: src=fedmsg-announce-commits.py dest=/usr/local/bin/fedmsg-announce-commits.py mode=0755
  tags:
  - batcave
  - config

#
# This script checks all the virthosts and logs what guests they are running.
#

- name: install vmdiff.sh cron
  copy: src=vmdiff.sh dest=/etc/cron.hourly/vmdiff.sh mode=0755
  tags:
  - batcave
  - config
  when: inventory_hostname.startswith('batcave01')

- name: install infradocs.sh cron
  copy: src=infradocs.sh dest=/etc/cron.hourly/infradocs.sh mode=0755
  tags:
  - batcave
  - config
  when: inventory_hostname.startswith('batcave01')


#
# Setup public db copy script.
#

- name: setup public db copy script
  copy: src=public-db-copy.sh dest=/usr/local/bin/public-db-copy.sh mode=0755
  tags:
  - batcave
  - config
#
# Setup public db copy cron.
#

- name: setup public db copy script
  copy: src=public-db-copy.cron dest=/etc/cron.d/public-db-copy.cron mode=0644
  tags:
  - batcave
  - config
  when: inventory_hostname.startswith('batcave01')

#
# Setup job that runs a check/diff ansible run over all playbooks each night.
#

- name: setup checkdiff ansible job
  copy: src=ansible-playbook-check-diff.cron dest=/etc/cron.daily/ansible-playbook-check-diff.cron mode=0755
  tags:
  - batcave
  - config
  when: inventory_hostname.startswith('batcave01')

#
# sync-rhn cron job
#
- name: setup sync-rhn cron
  copy: src=sync-rhn dest=/etc/cron.d/sync-rhn mode=0644
  tags:
  - batcave
  - config
  when: inventory_hostname.startswith('batcave01')


#
# Setup web server config
#
- name: install web server config for batcave (mimetypes)
  copy: src=mime-types.conf dest=/etc/httpd/conf.d/mime-types.conf mode=0644
  notify:
  - reload httpd
  tags:
  - batcave
  - config
  - httpd

- name: install web server config for batcave (access rules)
  copy: src=allows dest=/etc/httpd/conf.d/allows mode=0644
  notify:
  - reload httpd
  tags:
  - batcave
  - config
  - httpd

- name: install web server config for batcave (main config)
  template: src=infrastructure.fedoraproject.org.conf.j2 dest=/etc/httpd/conf.d/infrastructure.fedoraproject.org.conf mode=0644
  notify:
  - reload httpd
  tags:
  - batcave
  - config
  - httpd
  - sslciphers

#
# this cron job creates a json file from the rhel repos
#

- name: create repo2json directory
  file: dest=/srv/web/repo/json mode=0755 state=directory owner=apache group=apache
  tags:
  - batcave
  - config
  when: inventory_hostname.startswith('batcave01')

- name: create repo2json cron job
  copy: src=repo2json.cron dest=/etc/cron.d/repo2json.cron mode=0644
  tags:
  - batcave
  - config
  when: inventory_hostname.startswith('batcave01')

#
# ansible utils includes our rbac-playbook
#

- name: install ansible_utils config
  copy: src={{ private }}/files/rbac/rbac.yaml dest=/etc/ansible_utils/rbac.yaml mode=0500
  tags:
  - rbac
  - batcave
  - config

#
# Setup geoip scripts.
# Other machines pull current geoip data from here.
#

- name: Install geoip download databases script
  copy: src=geoip-download-databases dest=/usr/local/bin/geoip-download-databases mode=0755
  tags:
  - batcave
  - config

- name: Install geoip download cron
  copy: src=geoip-download-databases.cron dest=/etc/cron.d/geoip-download-databases.cron mode=0644
  tags:
  - batcave
  - config
  when: inventory_hostname.startswith('batcave01')

#
# fasClient fedmsg job
#

- name: Install config for fedmsg tigger for fasClient runs
  copy: src=fedmsg-fasclient.py dest=/etc/fedmsg.d/fasclient.py mode=0644
  tags:
  - batcave
  - config

#
# set selinux context for /srv/web/infra
#

- name: check the selinux context of webdir
  command: matchpathcon /srv/web
  register: webdir
  check_mode: no
  changed_when: "1 != 1"
  tags:
  - config
  - batcave
  - selinux
  - httpd
  - httpd/website

- name: /srv/web file contexts
  command: semanage fcontext -a -t httpd_sys_content_t "/srv/web(/.*)?"
  when: webdir.stdout.find('httpd_sys_content_t') == -1
  tags:
  - config
  - batcave
  - selinux
  - httpd
  - httpd/website

#
# set selinux context for public git repos
#

- name: check the selinux context of ansible
  command: matchpathcon /git/ansible
  register: webdir
  check_mode: no
  changed_when: "1 != 1"
  tags:
  - config
  - batcave
  - selinux
  - httpd
  - httpd/website

- name: /git/ansible file contexts
  command: semanage fcontext -a -t git_content_t "/git/ansible(/.*)?"
  when: webdir.stdout.find('git_content_t') == -1
  tags:
  - config
  - batcave
  - selinux
  - httpd
  - httpd/website

- name: check the selinux context of badges
  command: matchpathcon /git/badges
  register: webdir
  check_mode: no
  changed_when: "1 != 1"
  tags:
  - config
  - batcave
  - selinux
  - httpd
  - httpd/website

- name: /git/badges file contexts
  command: semanage fcontext -a -t git_content_t "/git/badges(/.*)?"
  when: webdir.stdout.find('git_content_t') == -1
  tags:
  - config
  - batcave
  - selinux
  - httpd
  - httpd/website

- name: check the selinux context of dns
  command: matchpathcon /git/dns
  register: webdir
  check_mode: no
  changed_when: "1 != 1"
  tags:
  - config
  - batcave
  - selinux
  - httpd
  - httpd/website

- name: /git/dns file contexts
  command: semanage fcontext -a -t git_content_t "/git/dns(/.*)?"
  when: webdir.stdout.find('git_content_t') == -1
  tags:
  - config
  - batcave
  - selinux
  - httpd
  - httpd/website

- name: check the selinux context of infra-docs
  command: matchpathcon /git/infra-docs
  register: webdir
  check_mode: no
  changed_when: "1 != 1"
  tags:
  - config
  - batcave
  - selinux
  - httpd
  - httpd/website

- name: /git/infra-docs file contexts
  command: semanage fcontext -a -t git_content_t "/git/infra-docs(/.*)?"
  when: webdir.stdout.find('git_content_t') == -1
  tags:
  - config
  - batcave
  - selinux
  - httpd
  - httpd/website

- name: Add SAR script for koji
  copy: src=koji_sar.py dest=/usr/local/bin/koji_sar.py owner=root mode=0700
  tags:
  - SAR
  - GDPR
  - koji
  - batcave

- name: create some tmp dirs
  file: path=/tmp-inst mode=000 owner=root group=root state=directory
  tags:
  - config
  - batcave
  - selinux

- name: create some tmp dirs
  file: path=/var/tmp-inst mode=000 owner=root group=root state=directory
  tags:
  - config
  - batcave
  - selinux

- name: put in place namespace.conf file
  copy: src=namespace.conf dest=/etc/security/namespace.conf mode=644 owner=root group=root
  tags:
  - config
  - batcave
  - selinux
