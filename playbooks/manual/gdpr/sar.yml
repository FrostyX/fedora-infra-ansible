# This playbook retrieves data that Fedora knows about a username and/or e-mail address.
#
# Admins:
#
#   To use this playbook, you should define the following vars: sar_fas_user, sar_email, and
#   sar_tar_output_path. The first two identify the person you wish to make an archive for, and the
#   last defines where the playbook will write the tarball on the local machine when its done. For
#   example:
#
#       $ sudo ansible-playbook playbooks/manual/gdpr/sar.yml -e sar_fas_user=bowlofeggs \
#           -e sar_email=bowlof@eggs.biz -e sar_tar_output_path=/home/bowlofeggs/bowlofeggs.tar.gz
#
#
# Developers:
#
#   Your task is to create a script and ansible variables so that your application is compatible
#   with this playbook.
#
#   Script
#   ------
#
#   You need to create a script and have your project's Ansible role install that script somewhere
#   (most likely on a host from your project - for example Bodhi's is going on bodhi-backend02.)
#   It's not a bad idea to put your script into your upstream project - there are plans for upstream
#   Bodhi to ship bodhi-sar. This script should accept two environment variables as input:
#   SAR_USERNAME and SAR_EMAIL. Not all applications will use both, so do what makes sense for your
#   app. The first will be a FAS username and the second will be an e-mail address. Your script
#   should gather the required information related to those identifiers and print it in a machine
#   readable format to stdout. Bodhi, for example, prints information to stdout in JSON.
#
#   Some scripts may need secrets embedded in them - if you must do this be careful to install the
#   script with 0700 permissions, ensuring that only sar_script_user can run them. Bodhi worked
#   around this concern by having the script run as apache and read Bodhi's server config file.
#
#   Variables
#   ---------
#
#   In addition to configuring a script, you need to define some Ansible variables for the host that
#   will run your script:
#
#     sar_script: The full path to the script (for example, /usr/bin/bodhi-sar).
#     sar_script_user: The user the script should be run as (for example, Bodhi runs as apache).
#     sar_output_file: The name of the file to write into the output tarball (for example, bodhi.json).
#
#   You also need to add your host to the [sar] group in inventory/inventory.

- name: Gather SAR data
  hosts: sar
  tasks:
    - command: "{{ sar_script }}"
      environment:
        SAR_USERNAME: "{{ sar_fas_user }}"
        SAR_EMAIL: "{{ sar_email }}"
      register: sar_data
      become: yes
      become_user: "{{ sar_script_user }}"
    # Let's make this a more conveniently expressed variable.
    - set_fact:
        sar_data: "{{ sar_data['stdout'] }}"

- name: Create the archive
  hosts: localhost
  tasks:
    - name: "Create the archive"
      block:
        # Create a safe place to store the files.
        - command: "mktemp -d"
          register: sar_tmp_dir
        # Let's make this a more conveniently expressed variable.
        - set_fact:
            sar_tmp_dir: "{{ sar_tmp_dir['stdout'] }}"
        # Write files from each service into our protected folder.
        - copy:
            content: "{{ hostvars[item]['sar_data'] }}"
            dest: "{{ sar_tmp_dir }}/{{ hostvars[item]['sar_output_file'] }}"
          loop: "{{ groups['sar'] }}"
        # Generate a private tarball of the files from each service.
        - shell: "umask 0077 && tar --transform \"s:^:{{ sar_fas_user }}_{{ sar_email }}/:\" -czf {{ sar_tmp_dir }}/{{ sar_fas_user }}_{{ sar_email }}.tar.gz *"
          args:
            chdir: "{{ sar_tmp_dir }}"
        # Move the tarball into the desired pick up location.
        - command: "mv {{ sar_tmp_dir }}/{{ sar_fas_user }}_{{ sar_email }}.tar.gz {{ sar_tar_output_path }}"
      always:
        # Let's clean up our temporary directory.
        - command: "rm -r {{ sar_tmp_dir }}"
